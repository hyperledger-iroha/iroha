"""
This module provides a Config class to manage Iroha network configuration.
"""

import tomlkit
import glob
import os
import random
from urllib.parse import urlparse


class Config:
    """
    Configuration class to handle Iroha network configuration.
    The class provides methods for loading the configuration from a file,
    accessing the configuration values,
    and randomising Torii URL to access different peers.

    :param port_min: The minimum port number for the TORII_API_URL.
    :type port_min: int
    :param port_max: The maximum port number for the TORII_API_URL.
    :type port_max: int
    """

    def __init__(self, port_min, port_max):
        self._config = None
        self.file = None
        self.port_min = port_min
        self.port_max = port_max
        self._envs = dict()

    def load(self, path_config_client_cli):
        """
        Load the configuration from the given config file.

        :param path_config_client_cli: The path to the configuration file.
        :type path_config_client_cli: str
        :raises IOError: If the file does not exist or is not a file.
        :raises ValueError: If the configuration file is invalid.
        """
        if not os.path.exists(path_config_client_cli):
            raise IOError(f"No config file found at {path_config_client_cli}")
        if not os.path.isfile(path_config_client_cli):
            raise IOError(f"The path is not a file: {path_config_client_cli}")

        try:
            with open(path_config_client_cli, "r", encoding="utf-8") as config_file:
                self._config = tomlkit.load(config_file)
        except Exception as e:
            raise ValueError(f"Error reading configuration file: {e}")

        self.file = path_config_client_cli

    def select_random_peer_config(self, peers_configs_dir):
        """
        Select and load a random configuration file generated by the generate_by_peers method.
        This updates the current configuration to the one chosen.

        :return: None
        """
        peers_configs = glob.glob(peers_configs_dir + "/*.toml")
        if not peers_configs:
            raise ValueError(
                "Peer configuration files not found. First generate them using generate_by_peers."
            )

        chosen_config_file = random.choice(peers_configs)

        self.load(chosen_config_file)

    def randomise_torii_url(self):
        """
        Randomise the Torii URL port.
        Note that in order for update to take effect,
        `self.env` should be used when executing the client cli.

        :return: None
        """
        random_port = random.randint(self.port_min, self.port_max)
        self.update_torii_url(random_port)

    def update_torii_url(self, port):
        """
        Update the Torii URL in the current configuration.

        :param port: Port to use in the Torii URL.
        :type port: int
        :raises ValueError: If the port is outside the allowed range.
        """
        if port < self.port_min or port > self.port_max:
            raise ValueError("Port is out of allowed range.")

        if self._config is None:
            raise ValueError("No configuration loaded. Use load() method first.")

        parsed_url = urlparse(self._config["torii_url"])
        updated_url = parsed_url._replace(
            netloc=f"{parsed_url.hostname}:{port}"
        ).geturl()
        self._envs["TORII_URL"] = updated_url

    @property
    def torii_url(self):
        """
        Get the Torii URL set in ENV vars.

        :return: Torii URL
        :rtype: str
        """
        return self._envs["TORII_URL"]

    @property
    def env(self):
        """
        Get the environment variables set to execute the client cli with.

        :return: Dictionary with env vars (mixed with existing OS vars)
        :rtype: dict
        """
        # self.select_random_peer_config()
        # return self._config['TORII_API_URL'
        return {**os.environ, **self._envs}

    @property
    def account_id(self):
        """
        Get the ACCOUNT_ID configuration value.

        :return: The ACCOUNT_ID.
        :rtype: str
        """
        return self._config["account"]["id"]

    @property
    def account_name(self):
        """
        Get the account name from the ACCOUNT_ID configuration value.

        :return: The account name.
        :rtype: str
        """
        return self.account_id.split("@")[0]

    @property
    def account_domain(self):
        """
        Get the account domain from the ACCOUNT_ID configuration value.

        :return: The account domain.
        :rtype: str
        """
        return self.account_id.split("@")[1]

    @property
    def public_key(self):
        """
        Get the PUBLIC_KEY configuration value.

        :return: The public key.
        :rtype: str
        """
        return self._config["account"]["public_key"].split("ed0120")[1]
