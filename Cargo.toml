[workspace.package]
edition = "2021"
version = "2.0.0-pre-rc.19"
# TODO: teams are being deprecated update the authors URL
authors = ["Iroha 2 team <https://github.com/orgs/soramitsu/teams/iroha2>"]

description = "Efficient, simple, Byzantine-fault-tolerant DLT inspired by the Kaizen principle"
repository = "https://github.com/hyperledger/iroha/tree/iroha2-lts"
documentation = "https://hyperledger.github.io/iroha-2-docs"
homepage = "https://iroha.tech"

license = "Apache-2.0"
keywords = ["blockchain", "crypto", "iroha", "ledger"]
categories = ["cryptography::cryptocurrencies"]

[workspace.dependencies]
iroha = { path = "cli" }
iroha_dsl = { version = "=2.0.0-pre-rc.19", path = "dsl" }
iroha_cli_derive = { version = "=2.0.0-pre-rc.19", path = "cli/derive" }
iroha_macro_utils = { version = "=2.0.0-pre-rc.19", path = "macro/utils" }
iroha_telemetry = { version = "=2.0.0-pre-rc.19", path = "telemetry" }
iroha_telemetry_derive = { version = "=2.0.0-pre-rc.19", path = "telemetry/derive" }
iroha_p2p = { version = "=2.0.0-pre-rc.19", path = "p2p" }
iroha_core = { version = "=2.0.0-pre-rc.19 ", path = "core" }
iroha_primitives = { version = "=2.0.0-pre-rc.19", path = "primitives", default-features = false }
iroha_primitives_derive = { version = "=2.0.0-pre-rc.19", path = "primitives/derive" }
iroha_data_model = { version = "=2.0.0-pre-rc.19", path = "data_model", default-features = false }
iroha_data_model_derive = { version = "=2.0.0-pre-rc.19", path = "data_model/derive" }
iroha_client = { version = "=2.0.0-pre-rc.19", path = "client" }
iroha_config = { version = "=2.0.0-pre-rc.19", path = "config" }
iroha_config_base = { version = "=2.0.0-pre-rc.19", path = "config/base" }
iroha_config_derive = { version = "=2.0.0-pre-rc.19", path = "config/base/derive" }
iroha_schema_gen = { version = "=2.0.0-pre-rc.19", path = "schema/gen" }
iroha_schema = { version = "=2.0.0-pre-rc.19", path = "schema", default-features = false }
iroha_schema_derive = { version = "=2.0.0-pre-rc.19", path = "schema/derive" }
iroha_logger = { version = "=2.0.0-pre-rc.19", path = "logger" }
iroha_crypto = { version = "=2.0.0-pre-rc.19", path = "crypto", default-features = false }
iroha_macro = { version = "=2.0.0-pre-rc.19", path = "macro", default-features = false }
iroha_derive = { version = "=2.0.0-pre-rc.19", path = "macro/derive" }
iroha_futures = { version = "=2.0.0-pre-rc.19", path = "futures" }
iroha_futures_derive = { version = "=2.0.0-pre-rc.19", path = "futures/derive" }
iroha_genesis = { version = "=2.0.0-pre-rc.19", path = "genesis" }
iroha_ffi = { version = "=2.0.0-pre-rc.19", path = "ffi" }
iroha_ffi_derive = { version = "=2.0.0-pre-rc.19", path = "ffi/derive" }
iroha_version = { version = "=2.0.0-pre-rc.19", path = "version", default-features = false }
iroha_version_derive = { version = "=2.0.0-pre-rc.19", path = "version/derive", default-features = false }
iroha_wasm_codec = { version = "=2.0.0-pre-rc.19", path = "wasm_codec" }
iroha_wasm_builder = { version = "=2.0.0-pre-rc.19", path = "wasm_builder" }

iroha_smart_contract = { version = "=2.0.0-pre-rc.19", path = "smart_contract" }
iroha_smart_contract_derive = { version = "=2.0.0-pre-rc.19", path = "smart_contract/derive" }
iroha_smart_contract_utils = { version = "=2.0.0-pre-rc.19", path = "smart_contract/utils" }
iroha_executor = { version = "=2.0.0-pre-rc.19", path = "smart_contract/executor" }
iroha_executor_derive = { version = "=2.0.0-pre-rc.19", path = "smart_contract/executor/derive" }
iroha_trigger = { version = "=2.0.0-pre-rc.19", path = "smart_contract/trigger" }
iroha_trigger_derive = { version = "=2.0.0-pre-rc.19", path = "smart_contract/trigger/derive" }

test_network = { version = "=2.0.0-pre-rc.19", path = "core/test_network" }

proc-macro-error = "1.0.4"
proc-macro2 = "1.0.49"
syn = { package = "syn", version = "1.0.109", default-features = false }
syn2 = { package = "syn", version = "2.0.25", default-features = false }
quote = "1.0.23"
manyhow = { version = "0.5.1", features = ["darling"] }
darling = "0.20.1"

futures = { version = "0.3.25", default-features = false }
async-stream = "0.3.3"
tokio = "1.23.0"
tokio-stream = "0.1.11"
tokio-tungstenite = "0.17.2"

crossbeam = "0.8.2"
crossbeam-queue = "0.3.8"
parking_lot = { version = "0.12.1" }

once_cell = "1.16.0"
tempfile = "3.3.0"
path-absolutize = "3.1.0"
pathdiff = "0.2.1"
itertools = "0.10.5"
bytes = "1.4.0"

vergen = { version = "8.1.1", default-features = false }
trybuild = "1.0.73"
impls = "1.0.3"

base64 = { version = "0.13.1", default-features = false }
hex = { version = "0.4.3", default-features = false }

fixnum = { version = "0.9.1", default-features = false }
url = "2.3.1"
prometheus = { version = "0.13.3", default-features = false }

clap = "4.2.1"
owo-colors = "3.5.0"
supports-color = "2.0.0"
inquire = "0.6.2"
spinoff = "0.7.0"
duct = "0.13.6"

criterion = "0.3.6"
proptest = "1.0.0"
expect-test = "1.4.1"

eyre = "0.6.8"
color-eyre = "0.6.2"
thiserror = { version = "1.0.38", default-features = false }
displaydoc = { version = "0.2.4", default-features = false }

cfg-if = "1.0.0"
derive_more = { version = "0.99.17", default-features = false }
async-trait = "0.1.60"
strum = { version = "0.24.1", default-features = false }
getset = "0.1.2"
hex-literal = "0.3.4"

ursa = "0.3.7"
aead = "0.3.2"

rand = "0.8.5"
warp = { version = "0.3.5", default-features = false }
wasmtime = "11.0.1"

tracing = "0.1.37"
tracing-core = "0.1.30"
tracing-subscriber = { version = "0.3.16", default-features = false }
tracing-futures = { version = "0.2.5", default-features = false }
tracing-bunyan-formatter = { version = "0.3.4", default-features = false }

dashmap = "5.4.0"
rustc-hash = "1.1.0"

serde = { version = "1.0.151", default-features = false }
serde_json = { version = "1.0.91", default-features = false }
serde_yaml = "0.9.21"
serde_with = { version = "2.2.0", default-features = false }
parity-scale-codec = { version = "3.2.1", default-features = false }
json5 = "0.4.1"

[workspace.lints]
rust.anonymous_parameters = "deny"

# lower the priority to allow overriding later
clippy.pedantic = { level = "deny", priority = -1 }
clippy.all = { level = "deny", priority = -1 }
clippy.dbg_macro = "deny"

# clippy.nursery = "deny"
clippy.debug_assert_with_mut_call = "deny"
clippy.derive_partial_eq_without_eq = "deny"
clippy.empty_line_after_outer_attr = "deny"
clippy.fallible_impl_from = "deny"
clippy.future_not_send = "deny"
clippy.iter_with_drain = "deny"
clippy.mutex_integer = "deny"
clippy.needless_collect = "deny"
clippy.path_buf_push_overwrite = "deny"
clippy.suboptimal_flops = "deny"
clippy.trailing_empty_array = "deny"
clippy.transmute_undefined_repr = "deny"
clippy.trivial_regex = "deny"
clippy.unused_peekable = "deny"
clippy.unused_rounding = "deny"

rust.future_incompatible = "deny"
rust.missing_copy_implementations = "deny"
rust.missing_docs = "deny"
rust.nonstandard_style = "deny"
rust.private_doc_tests = "deny"
rust.rust_2018_idioms = "deny"
rust.trivial_casts = "deny"
rust.trivial_numeric_casts = "deny"
rust.unconditional_recursion = "deny"
rust.unsafe_code = "deny"
rust.unused = "deny"
rust.unused_import_braces = "deny"
rust.variant_size_differences = "deny"
rust.unused_tuple_struct_fields = "deny"
rust.explicit_outlives_requirements = "deny"
rust.non_ascii_idents = "deny"
# TODO: reenable
# rust.unreachable_pub = "deny"
# rust.unsafe_op_in_unsafe_fn = "deny"

# These are up to personal taste. We don't want these to be enabled ever.
clippy.string_add = "allow"
clippy.as_conversions = "allow"
clippy.else_if_without_else = "allow"
clippy.enum_glob_use = "allow"
clippy.exhaustive_enums = "allow"
clippy.exhaustive_structs = "allow"
clippy.implicit_return = "allow"
clippy.inconsistent_struct_constructor = "allow"
clippy.indexing_slicing = "allow"
clippy.arithmetic_side_effects = "allow"
clippy.let_underscore_must_use = "allow"
clippy.match_wildcard_for_single_variants = "allow"
clippy.missing_docs_in_private_items = "allow"
clippy.module_name_repetitions = "allow"
clippy.shadow_reuse = "allow"
clippy.shadow_same = "allow"

# These are normally decisions, which need to be audited by a human.
clippy.unwrap_in_result = "allow"
clippy.expect_used = "allow"
clippy.unreachable = "allow"
clippy.wildcard_enum_match_arm = "allow"
clippy.wildcard_imports = "allow"
# Our preferred style.
clippy.non-ascii-literal = "allow"
clippy.std_instead_of_core = "allow"

# This lint could be useful in theory. The trade-off of making
# refactoring away from references difficult isn't worth it in all
# cases, so if it is enabled, it should be enabled locally.
clippy.pattern_type_mismatch = "allow"

# Style guide.
clippy.mod-module-files = "allow"
clippy.separated-literal-suffix = "allow"
# Most trybuild code triggers a false-positive.

# Not all public items should be inline. We only inline **trivial** functions.
clippy.missing_inline_in_public_items = "allow"

# --- Re-enable candidates -----

# Lots of false-positives.
clippy.self-named-module-files = "allow"
clippy.manual_let_else = "allow"

# We often need to shadow the name of the method to specialise.
# As soon as trait specialisation is stable we need to remove it.
clippy.same_name_method = "allow"
clippy.pub_use = "allow"

# Style guide candidate. Explicitly converting the return value to
# () is good for refactoring, and if there is necessary
# processing of the data returned by a function, it should
# **really** be marked as #[must_use]
clippy.semicolon_if_nothing_returned = "allow"

# This lint has way too many false-positives, so even enabling it
# as a warning is too much.  Instead prefer adding explicit
# `#[deny]` directives
clippy.must_use_candidate = "allow"

# Unstable and many false-positives
## https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
clippy.missing_const_for_fn = "allow"

# Too much affected code. Often impossible to apply suggestion on stable rust.
rust.elided_lifetimes_in_paths = "allow"

# This lint produces a lot of false positives. Recommend local #[deny] directives
clippy.use_self = "allow"

# We don't want to manually deny every `clippy.restriction.*` lint.
clippy.blanket-clippy-restriction-lints = "allow"

# A lot of false-positive.
clippy.partial_pub_fields = "allow"

# Should be enabled per trait impl rather than globally.
clippy.missing_trait_methods = "allow"

# We allow this and deny `clippy.semicolon_inside_block`.
clippy.semicolon_outside_block = "allow"

# It is debatable whether it's actually easier to read,
# additionally, not all patterns are covered by the inlined syntax
clippy.uninlined_format_args = "allow"

rust.unknown_lints = "warn"
# these lints were duplicated, with `allow` taking precedence
# clippy.inconsistent_struct_constructor = "warn"
# clippy.match_wildcard_for_single_variants = "warn"
# clippy.arithmetic_side_effects = "warn"
clippy.option_if_let_else = "warn"
clippy.or_fun_call = "warn"
clippy.redundant_pub_crate = "warn"
clippy.string_lit_as_bytes = "warn"
clippy.suspicious_operation_groupings = "warn"
clippy.useless_let_if_seq = "warn"

# unstable
# rust.non_exhaustive_omitted_patterns = "warn"

rust.single_use_lifetimes = "warn"
rust.unused_lifetimes = "warn"

[workspace]
resolver = "2"
members = [
  "cli",
  "cli/derive",
  "client",
  "client_cli",
  "config",
  "config/base",
  "config/base/derive",
  "core",
  "core/test_network",
  "crypto",
  "data_model",
  "genesis",
  "primitives",
  "primitives/derive",
  "dsl",
  "ffi",
  "ffi/derive",
  "futures",
  "futures/derive",
  "logger",
  "macro",
  "macro/derive",
  "macro/utils",
  "p2p",
  "schema",
  "schema/derive",
  "schema/gen",
  "smart_contract",
  "smart_contract/derive",
  "smart_contract/trigger",
  "smart_contract/trigger/derive",
  "smart_contract/utils",
  "smart_contract/executor",
  "smart_contract/executor/derive",
  "substrate",
  "telemetry",
  "tools/kagami",
  "tools/kura_inspector",
  "tools/parity_scale_decoder",
  "tools/swarm",
  "tools/wasm_builder_cli",
  "tools/wasm_test_runner",
  "version",
  "version/derive",
  "wasm_codec",
  "wasm_codec/derive",
  "wasm_builder",
]

[profile.deploy]
inherits = "release"
opt-level = 3
debug = false
strip = "symbols"
debug-assertions = false
lto = true
incremental = false
