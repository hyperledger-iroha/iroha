# For all clippy lints please visit: https://rust-lang.github.io/rust-clippy/master/
deny = [
    'anonymous_parameters',
    'clippy::all',
    'clippy::dbg_macro',
    'clippy::nursery',
    'clippy::pedantic',
    'future_incompatible',
    'missing_copy_implementations',
    'missing_docs',
    'nonstandard_style',
    'private_doc_tests',
    'rust_2018_idioms',
    'trivial_casts',
    'trivial_numeric_casts',
    'unconditional_recursion',
    'unsafe_code',
    'unused',
    'unused_import_braces',
    'variant_size_differences',
    'unused_tuple_struct_fields',
    'explicit_outlives_requirements',
    'let_underscore_drop',
    'non_ascii_idents',
    # TODO: reenable
    # 'unreachable_pub',
    # 'unsafe_op_in_unsafe_fn',
]

allow = [
    # These are up to personal taste. We don't want these to be enabled ever.
    'clippy::string_add',
    'unknown_lints',
    'clippy::as_conversions',
    'clippy::else_if_without_else',
    'clippy::enum_glob_use',
    'clippy::exhaustive_enums',
    'clippy::exhaustive_structs',
    'clippy::implicit_return',
    'clippy::inconsistent_struct_constructor',
    'clippy::indexing_slicing',
    'clippy::integer_arithmetic',
    'clippy::let_underscore_must_use',
    'clippy::match_wildcard_for_single_variants',
    'clippy::missing_docs_in_private_items',
    # Not all public items should be inline. We only inline **trivial** functions.
    'clippy::missing_inline_in_public_items',
    'clippy::module_name_repetitions',
    'clippy::must_use_candidate',
    'clippy::pattern_type_mismatch',
    'clippy::semicolon_if_nothing_returned',
    'clippy::non-ascii-literal',
    'clippy::wildcard_enum_match_arm',
    'clippy::wildcard_imports',
    'clippy::pub_use',
    'clippy::shadow_reuse',
    'clippy::shadow_same',

    # These are normally decisions, which need to be audited by a human.
    'clippy::unwrap_in_result',
    'clippy::expect_used',
    'clippy::unreachable',
    'clippy::use_self',
    'clippy::wildcard_enum_match_arm',
    'clippy::wildcard_imports',
    'elided_lifetimes_in_paths',
    # Our preferred style.
    'clippy::non-ascii-literal',
    'clippy::std_instead_of_core',
    'clippy::uninlined_format_args',

    # This lint could be useful in theory. The trade-off of making
    # refactoring away from references difficult isn't worth it in all
    # cases, so if it is enabled, it should be enabled locally.
    'clippy::pattern_type_mismatch',

    # Style guide.
    'clippy::mod-module-files',
    'clippy::separated-literal-suffix',
    # Most trybuild code triggers a false-positive.

    # --- Re-enable candidates -----

    # Lots of false-positives.
    'clippy::self-named-module-files',
    'clippy::manual_let_else',

    # We often need to shadow the name of the method to specialise.
    # As soon as trait specialisation is stable we need to remove it.
    'clippy::same_name_method',
    'clippy::pub_use',
    'unknown_lints',

    # Style guide candidate. Explicitly converting the return value to
    # () is good, for refactoring, and if there is a necessary
    # processing of the data returned by a function, it should
    # **really** be marked as #[must_use]
    'clippy::semicolon_if_nothing_returned',

    # This lint has way too many false-positives, so even enabling it
    # as a warning is too much.  Instead prefer adding explicit
    # `#[deny]` directives
    'clippy::must_use_candidate',

    # TODO: Remove when stabilized
    ## https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
    'clippy::missing_const_for_fn',

    # While we should aspire to enable it one day, I vote for enabling
    # it selectively, in cases where borrowing is necessary to convey
    # to the user
    'elided_lifetimes_in_paths',

    # This lint produces a lot of false positives. Recommend enabling
    # locally. Also, it highlights many types and enums, which
    # indicates that the lint is triggered by the generated code
    'clippy::use_self',

    # Not all public items should be inline. We only inline **trivial** functions.
    'clippy::missing_inline_in_public_items',



]

warn = [
    # These are lints which should really be conveyed to the author,
    # but not necessarily fixed.

    'unknown_lints',
    'clippy::inconsistent_struct_constructor',
    'clippy::match_wildcard_for_single_variants',
    'clippy::arithmetic_side_effects',

    # unstable
    # 'non_exhaustive_omitted_patterns',

    'single_use_lifetimes',
    'unused_lifetimes',

    # A couple of false positives.
    # 'unused_qualifications',

    # Lots of false-positives.
    # 'unused_crate_dependencies',
]
