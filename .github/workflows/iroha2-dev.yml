name: Iroha 2 dev branch workflow

on:
  push:
    branches: [iroha2-dev]

env:
  CARGO_TERM_COLOR: always

jobs:
  archive-artifacts:
    runs-on: [self-hosted, Linux]
    container: rust:1.55-buster
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential \
            ca-certificates \
            clang \
            llvm-dev
      - name: Build
        run: cargo build --release --verbose
      - name: Archive build
        uses: actions/upload-artifact@v2
        with:
          name: cargo-build-release
          path: target/release/iroha_cli
      - name: Archive Client CLI build
        uses: actions/upload-artifact@v2
        with:
          name: cargo-client-cli-build-release
          path: target/release/iroha_client_cli
      - name: Archive Crypto CLI build
        uses: actions/upload-artifact@v2
        with:
          name: cargo-crypto-cli-build-release
          path: target/release/iroha_crypto_cli

  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Iroha Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: hyperledger/iroha2:dev
          build-args: |
            TARGET_DIR=release
            PROFILE=--release

      - name: Build and push Iroha client cli Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: hyperledger/iroha2:client-cli-dev
          build-args: |
            TARGET_DIR=release
            PROFILE=--release
            BIN=iroha_client_cli

      - name: Build and push Iroha Crypto CLI Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: hyperledger/iroha2:crypto-cli-dev
          build-args: |
            TARGET_DIR=release
            PROFILE=--release
            BIN=iroha_crypto_cli

  # Coverage is both in PR and in push pipelines so that:
  # 1. PR can get coverage report from bot.
  # 2  Coverage bot can have results from `iroha2-dev` to report accurate coverage changes.
  coverage:
    runs-on: [self-hosted, Linux]
    container: rust:1.55-buster
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential \
            ca-certificates \
            clang \
            llvm-dev
      - name: Install grcov
        run: cargo install grcov
      - name: Cargo clean
        run: cargo clean
      - name: Install llvm-tools-preview
        run: rustup component add llvm-tools-preview
      - name: Cargo build
        run: cargo build
        env:
          RUSTFLAGS: "-Zinstrument-coverage"
          RUSTC_BOOTSTRAP: 1
      - name: Run tests
        run: cargo test --workspace -- --test-threads=1
        env:
          RUSTFLAGS: "-Zinstrument-coverage"
          RUSTC_BOOTSTRAP: 1
          LLVM_PROFILE_FILE: "iroha-%p-%m.profraw"
      - name: Generate coverage report
        run: grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "/*" -o lcov.info
      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v1
        with:
          file: lcov.info

  publish-artifacts:
    runs-on: [self-hosted, Linux] #ubuntu-latest
    container: rust:1.55-buster
    steps:
      - uses: actions/checkout@v2
      - name: Run schema generation
        run: |
          mkdir -p target/schema
          cargo run -p iroha_schema_bin > target/schema/schema.json
      - name: Upload schema
        uses: actions/upload-artifact@v2
        with:
          name: schema
          path: target/schema
