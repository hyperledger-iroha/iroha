name: Iroha 2 pull requests workflow
on:
  pull_request:
    branches: [iroha2-dev]
env:
  CACHE_PATHS: |
    ~/.cargo/registry
    ~/.cargo/git
    ~/.rustup
    target
    iroha/target
    iroha_client/target
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ hashFiles('Cargo.toml') }}
      - name: Format check
        run: cargo fmt --all --verbose -- --check
      - name: Static analysis with all features enabled
        run: cargo clippy --workspace --all-features -- -Dwarnings
      - name: Static analysis without features
        run: cargo clippy --workspace -- -Dwarnings
      - name: Static analysis with all features on tests
        run: cargo clippy --workspace --all-features --tests -- -Dwarnings
      - name: Static analysis without features on tests
        run: cargo clippy --workspace --tests -- -Dwarnings
      - name: Static analysis with all features on benches
        run: cargo clippy --workspace --all-features --benches -- -Dwarnings
      - name: Static analysis without features on benches
        run: cargo clippy --workspace --benches -- -Dwarnings
      - name: Documentation check
        run: cargo doc --no-deps --verbose
      - name: Archive documentation
        uses: actions/upload-artifact@v1
        with:
          name: cargo-doc
          path: target/doc
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ hashFiles('Cargo.toml') }}
      - name: Run tests
        run: cargo test --workspace --verbose -- --test-threads=1
  test-iroha_network-mock:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ hashFiles('Cargo.toml') }}
      - name: Run iroha_network mock tests
        run: cd ./iroha_network && cargo test --features mock --verbose -- --test-threads=1
      - name: Run iroha tests with network mock
        run: cd ./iroha && cargo test --features network-mock --verbose -- --test-threads=1
  test-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ hashFiles('Cargo.toml') }}
      - name: Build Client CLI
        run: cargo build --verbose
        working-directory: iroha_client_cli
      - name: Setup docker test environment
        run: ./scripts/setup_docker_test_env.sh
      - name: Docker compose genesis test
        run: bash -c './scripts/test_genesis_docker_compose.sh || ( docker-compose logs; false )'
      - name: Docker compose test
        run: bash -c './scripts/test_docker_compose.sh || ( docker-compose logs; false )'
      - name: Cleanup docker test environment
        run: ./scripts/cleanup_docker_test_env.sh
  test-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Setup docker test environment
        run: ./scripts/setup_docker_test_env.sh
      - name: Test iroha2-java api
        run: ./scripts/test_iroha2_java_api.sh
      - name: Cleanup test iroha2-java api
        run: ./scripts/cleanup_iroha2_java_api.sh
      - name: Cleanup docker test environment
        run: ./scripts/cleanup_docker_test_env.sh
      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties
