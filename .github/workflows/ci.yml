name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  IROHA_CLI_DIR: "/__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}/test"
  DEFAULTS_DIR: defaults
  WASM_TARGET_DIR: wasm/target/prebuilt
  TEST_NETWORK_TMP_DIR: /tmp
  NEXTEST_PROFILE: ci

jobs:
  pre_build:
    runs-on: ubuntu-latest
    container:
      image: hyperledger/iroha2-ci:nightly-2024-09-09
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "pre-build" # to differentiate from the "build" cache
          cache-on-failure: "true"
          workspaces: ".\n./wasm"
      - name: Build
        run: ./scripts/build_wasm.sh
      - name: Upload all built WASMs
        uses: actions/upload-artifact@v4
        with:
          name: wasm
          path: ${{ env.WASM_TARGET_DIR }}
          retention-days: 1

  # Formatting does not require any compilation
  format:
    runs-on: ubuntu-latest
    container:
      image: hyperledger/iroha2-ci:nightly-2024-09-09
    steps:
      - uses: actions/checkout@v4
      - name: Format
        run: cargo fmt --all -- --check
      - name: Format (wasm)
        working-directory: wasm
        run: cargo fmt --all -- --check

  build:
    runs-on: [self-hosted, Linux, iroha2]
    container:
      image: hyperledger/iroha2-ci:nightly-2024-09-09
    needs: pre_build
    env:
      LLVM_PROFILE_FILE_NAME: "iroha-%p-%m.profraw"
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/install-action@nextest
      - uses: taiki-e/install-action@cargo-llvm-cov
      - name: Download wasm
        uses: actions/download-artifact@v4
        with:
          name: wasm
          path: ${{ env.WASM_TARGET_DIR }}
      - name: Move wasm libs
        run: |
          mv ${{ env.WASM_TARGET_DIR }}/libs ${{ env.DEFAULTS_DIR }}/libs
          mv ${{ env.DEFAULTS_DIR }}/libs/default_executor.wasm ${{ env.DEFAULTS_DIR }}/executor.wasm
      - name: Clippy (all features)
        run: cargo clippy --all-targets --workspace --benches --tests --examples --all-features --quiet --message-format=json | tee clippy.json
      - name: Build (release)
        run: cargo build --release
      - name: Test (full)
        id: test
        run: >
          mold --run cargo llvm-cov nextest
          --locked
          --branch --no-report
      - name: Test (doc)
        id: test-doc
        run: >
          mold --run cargo llvm-cov --doc
          --branch --no-report
      - name: Documentation
        run: cargo doc --no-deps --quiet
      - name: Consistency
        run: |
          ./scripts/tests/consistency.sh genesis
          ./scripts/tests/consistency.sh schema
          ./scripts/tests/consistency.sh cli-help
          ./scripts/tests/consistency.sh docker-compose
      - name: Generate lcov report
        run: cargo llvm-cov report --doctests --ignore-filename-regex 'iroha_cli|iroha_torii' --lcov --output-path lcov.info
      - name: Upload lcov report
        uses: actions/upload-artifact@v4
        with:
          name: report-coverage
          path: lcov.info
      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2.3.6
        with:
          file: lcov.info
          format: lcov
          github-token: ${{ github.token }}
      - name: Upload test network artifacts
        if: failure() && (steps.test.outcome == 'failure')
        uses: actions/upload-artifact@v4
        with:
          name: test_network_runs
          path: ${{ env.TEST_NETWORK_TMP_DIR }}/irohad_test_network_*
          retention-days: 3
      - name: Upload clippy report artifact
        uses: actions/upload-artifact@v4
        with:
          name: report-clippy
          path: clippy.json

  docker_compose_and_pytests:
    needs: pre_build
    runs-on: [self-hosted, Linux, iroha2]
    timeout-minutes: 60
    env:
      PYTHON_VERSION: "3.11"
      POETRY_PATH: "/root/.local/bin/poetry"
      TEST_DIR: "tmp/test"
      IROHA_BIN: "iroha"
      IROHA_CONTAINER: "defaults-irohad0-1"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download wasm libs
        uses: actions/download-artifact@v4
        with:
          name: wasm
          path: ${{ env.WASM_TARGET_DIR }}
      - name: Move wasm libs
        run: |
          mv ${{ env.WASM_TARGET_DIR }}/libs ${{ env.DEFAULTS_DIR }}/libs
          mv ${{ env.DEFAULTS_DIR }}/libs/default_executor.wasm ${{ env.DEFAULTS_DIR }}/executor.wasm
      - name: Install Python and Poetry
        run: |
          yum install -y python${{ env.PYTHON_VERSION }} python${{ env.PYTHON_VERSION }}-devel
          curl -sSL https://install.python-poetry.org | python3 -
          echo 'export PATH="${{ env.POETRY_PATH }}:$PATH"' >> /etc/profile
          source /etc/profile
      - name: Set up Docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: Build and tag Docker images
        uses: docker/build-push-action@v6
        if: always()
        with:
          context: .
          load: true
          tags: |
            hyperledger/iroha:local
            hyperledger/iroha:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Test docker-compose.single.yml
        run: |
          docker compose -f ${{ env.DEFAULTS_DIR }}/docker-compose.single.yml up --wait || {
            echo "docker-compose failed. Logs:";
            docker compose -f ${{ env.DEFAULTS_DIR }}/docker-compose.single.yml logs --tail="all";
            exit 1;
          }
          docker compose -f ${{ env.DEFAULTS_DIR }}/docker-compose.single.yml down
      - name: Test docker-compose.local.yml
        run: |
          docker compose -f ${{ env.DEFAULTS_DIR }}/docker-compose.local.yml up --wait || {
            echo "docker-compose failed. Logs:";
            docker compose -f ${{ env.DEFAULTS_DIR }}/docker-compose.local.yml logs --tail="all";
            exit 1;
          }
          docker compose -f ${{ env.DEFAULTS_DIR }}/docker-compose.local.yml down
      - name: Run docker-compose.yml containers
        run: docker compose -f ${{ env.DEFAULTS_DIR }}/docker-compose.yml up --wait || exit 1
      - name: Install Torii pytest dependencies
        working-directory: pytests/iroha_torii_tests
        run: ${{ env.POETRY_PATH }} install --no-root
      - name: Run Torii pytests
        working-directory: pytests/iroha_torii_tests
        run: ${{ env.POETRY_PATH }} run pytest
      - name: Copy client binary from Iroha container
        if: always()
        run: |
          mkdir -p ${{ env.TEST_DIR }}
          cp ./defaults/client.toml ${{ env.TEST_DIR }}
          docker cp ${{ env.IROHA_CONTAINER }}:/usr/local/bin/${{ env.IROHA_BIN }} ${{ env.TEST_DIR }}
          chmod +x ${{ env.TEST_DIR }}/${{ env.IROHA_BIN }}
      - name: Install client pytest dependencies
        working-directory: pytests/iroha_cli_tests
        run: ${{ env.POETRY_PATH }} install --no-root
      - name: Run client pytests
        uses: nick-fields/retry@v3
        env:
          TMP_DIR: ../../${{ env.TEST_DIR }}
          IROHA_CLI_BINARY: ${{ env.IROHA_BIN }}
          IROHA_CLI_CONFIG: client.toml
        with:
          timeout_minutes: 10
          max_attempts: 5
          command: |
            cd pytests/iroha_cli_tests
            ${{ env.POETRY_PATH }} run pytest
          on_retry_command: |
            docker compose -f ${{ env.DEFAULTS_DIR }}/docker-compose.yml down
            docker compose -f ${{ env.DEFAULTS_DIR }}/docker-compose.local.yml up --wait || exit 1
      - name: Wipe docker-compose.yml containers
        if: always()
        run: docker compose -f ${{ env.DEFAULTS_DIR }}/docker-compose.yml down

  # Run the job to check that the docker containers are properly buildable
  pr_generator_build:
    # Job will only execute if the head of the pull request is a branch for PR-generator case
    if: startsWith(github.head_ref, 'iroha2-pr-deploy/')
    runs-on: [self-hosted, Linux, iroha2]
    container:
      image: hyperledger/iroha2-ci:nightly-2024-09-09
    steps:
      - uses: actions/checkout@v4
      - name: Login to Soramitsu Harbor
        uses: docker/login-action@v3
        with:
          registry: docker.soramitsu.co.jp
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_TOKEN }}
      - name: Set up Docker Buildx
        id: buildx
        if: always()
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: Build and push iroha:dev image
        uses: docker/build-push-action@v6
        if: always()
        with:
          push: true
          tags: docker.soramitsu.co.jp/iroha2/iroha:dev-${{ github.event.pull_request.head.sha }}
          labels: commit=${{ github.sha }}
          build-args: TAG=dev
          # This context specification is required
          context: .

  check_pr_title:
    name: Check PR title
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Check conventional commits
        uses: amannn/action-semantic-pull-request@v5
        id: lint_pr_title
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          validateSingleCommit: true
          validateSingleCommitMatchesPrTitle: true

      - name: Post error comment
        uses: marocchino/sticky-pull-request-comment@v2
        # When the previous step fails, the workflow would stop. By adding this
        # condition you can continue the execution with the populated error message.
        if: always() && (steps.lint_pr_title.outputs.error_message != null)
        with:
          header: pr-title-lint-error
          message: |
            Hey there and thank you for opening this pull request! 👋🏼

            We require pull request titles to follow the [Conventional Commits specification](https://www.conventionalcommits.org/en/v1.0.0/), and it looks like your proposed title needs to be adjusted.

            Details:

            ```
            ${{ steps.lint_pr_title.outputs.error_message }}
            ```

      # Delete a previous comment when the issue has been resolved
      - name: Delete error comment
        if: ${{ steps.lint_pr_title.outputs.error_message == null }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: pr-title-lint-error
          delete: true

  check_config_label:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - id: label-the-PR
        uses: actions/labeler@v5
      - uses: mshick/add-pr-comment@v2
        if: contains(steps.label-the-PR.outputs.all-labels, 'config-changes')
        with:
          message: |
            @BAStos525

  check_links:
    runs-on: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Link Checker
        id: lychee
        uses: lycheeverse/lychee-action@v2
        with:
          args: "'**/*.rs' ." # Check rust source and default text files
          fail: true

  sonarqube_defectdojo:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: hyperledger/iroha2-ci:nightly-2024-09-09
    steps:
      - uses: actions/checkout@v4
      - name: Download clippy and lcov artifact reports
        uses: actions/download-artifact@v4
        with:
          path: lints
          pattern: report-*
          merge-multiple: true
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: SonarQube
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dcommunity.rust.clippy.reportPaths=lints/clippy.json
            -Dcommunity.rust.lcov.reportPaths=lints/lcov.info
      - name: DefectDojo
        id: defectdojo
        uses: C4tWithShell/defectdojo-action@1.0.6
        with:
          token: ${{ secrets.DEFECTOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
          product_type: iroha2
          engagement: ${{ github.ref_name }}
          tools: "SonarQube API Import,Github Vulnerability Scan"
          sonar_projectKey: hyperledger:iroha
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repository: ${{ github.repository }}
          product: ${{ github.repository }}
          environment: Test
          reports: '{"Github Vulnerability Scan": "github.json"}'

  test_wasm:
    runs-on: ubuntu-latest
    container:
      image: hyperledger/iroha2-ci:nightly-2024-09-09
    needs: pre_build
    steps:
      - uses: actions/checkout@v4
      - name: Download wasm
        uses: actions/download-artifact@v4
        with:
          name: wasm
          path: ${{ env.WASM_TARGET_DIR }}
      - name: Move executor.wasm
        run: |
          mv ${{ env.WASM_TARGET_DIR }}/libs/default_executor.wasm ${{ env.DEFAULTS_DIR }}/executor.wasm
      - name: Build iroha_wasm_test_runner (release)
        run: cargo build --bin iroha_wasm_test_runner --release
      - name: Run smart contract tests on WebAssembly VM
        working-directory: crates/iroha_smart_contract
        run: mold --run cargo test -p iroha_smart_contract -p iroha_smart_contract_utils --release --tests --target wasm32-unknown-unknown --no-fail-fast --quiet
