## DO NOT EDIT
## Generated from build-iroha1.src.yml with make-workflows.sh

name: Iroha1
## TODO vcpkg build only Debug or only Release
## TODO better caching utilizing diff-backup style tools like restic and rclone
##      to improve performance and reduce storage consumption
## TODO More powerful Mac machine to reduce build time from 40min to 10min
## FIXME ctest integration_fake_peer_example_test [ubuntu clang-10 Debug]
## FIXME cannot push docker image iroha-builder without credentials when PR is from fork.
##       Solution: need GH secrets, so use PRs from the same repo

#${{ github.event.pull_request.head.repo.fork }}   ## check if PR head repo is fork
## ternary ${{ fromJSON('["no", "yes"]')[github.ref != 'refs/heads/master'] }}
on:
  push:
    branches: [main, support/1.2.x]
    tags: ['v*']
  pull_request:
    branches: [main, support/1.2.x] ## target branches
  workflow_dispatch:
    ## NOTE: Able to run via cmdline: gh workflow run Iroha1
    inputs:
      whatever:
        description: 'some-string.'
        required: true
        default: 'hello world!'
  issue_comment:
    types: [created, edited]
jobs:
  pr_comment_reaction_rocket:
    ## Just to react to valid comment with rocket
    runs-on: ubuntu-latest
    if: ${{ github.event.comment && github.event.issue.pull_request && startsWith(github.event.comment.body, '/buildme') }}
    steps:
      - name: Show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END
      - name: Reaction
        run: |
          # send reaction to comment to show build was triggered
          curl ${{github.event.comment.url}}/reactions \
            -X POST \
            -d '{"content":"rocket"}' \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            -H "Authorization: token ${{github.token}}"
  Docker-iroha-builder:
    if: ${{ github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }} ## check if PR not from fork; PR actions from public forks have no access to secrets
    runs-on: [self-hosted, Linux]
    steps:
      - name: Show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END
      - if: ${{false}}
        name: Cancel Previous Workflow Runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ github.token }}
      - name: System info
        run: |
          set -x
          whoami
          free  ||  vm_stat | perl -ne '/page size of (\d+)/ and $size=$1; /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'
          df -h
      - name: Build info
        run: |
          cat << 'END'
          ref:${{github.ref}}
          sha:${{github.sha}}
          run_number:${{github.run_number}}
          event_name:${{github.event_name}}
          event.action:${{github.event.action}}
          event.issue.number:${{ github.event.issue.number }}
          END
      - name: REF and SHA of commented PR to ENV
        if: github.event.comment
        run: >
          curl -fsSL ${{github.event.issue.pull_request.url}} -H "Authorization: token ${{github.token}}" | jq -r '

            "PR_REF="+.head.ref,
            "PR_SHA="+.head.sha,
            "PR_NUM="+(.number|tostring),
            "PR_REPO="+.head.repo.full_name' >>$GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{env.PR_REF}} ## not empty on issue_comment, else default value GITHUB_REF
          repository: ${{env.PR_REPO}} ## not empty on issue_comment, else default value github.repository, required by forks
      - name: Determine dockertag
        id: dockertag
        run: echo "::set-output name=dockertag::${{ hashFiles('docker/develop/Dockerfile.builder') }}"
      - name: Dockerhub creds
        env:
          DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_ORG }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DOCKERHUB: ${{ secrets.DOCKERHUB }}
        run: |
          echo DOCKERHUB_ORG="${DOCKERHUB_ORG:-hyperledger}"      >>$GITHUB_ENV
          echo DOCKERHUB_USERNAME="${DOCKERHUB_USERNAME:-humb1t}" >>$GITHUB_ENV
          echo DOCKERHUB_TOKEN="${DOCKERHUB_TOKEN:-$DOCKERHUB}"   >>$GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKERHUB_ORG }}/iroha-builder
          tags: |
            type=raw,value=${{steps.dockertag.outputs.dockertag}}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=schedule
          #  type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{steps.dockertag.outputs.dockertag}}
          restore-keys: ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USERNAME }} ## humb1t  for hyperledger
          password: ${{ env.DOCKERHUB_TOKEN }} ## ${{ secrets.DOCKERHUB }}
      - name: When Login to DockerHub imposible
        id: login_failed
        if: failure()
        run: echo ::set-output name=result::"true"
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: docker/develop/Dockerfile.builder
          # context: .
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          push: true #${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
    outputs:
      dockertag: ${{steps.dockertag.outputs.dockertag}}
      _dockertag: :${{steps.dockertag.outputs.dockertag}}
      login_failed: ${{steps.login_failed.outputs.result}}
  ## Build in a docker container
  build-iroha-ubuntu:
    # if: ${{ event_name == 'workflow_dispatch' and }}
    needs: Docker-iroha-builder
    ## Allow if: 1. Docker-iroha-builder was skipped (temp fix); 2. for pull_request only gcc-9
    if: ${{ ( success() || needs.Docker-iroha-builder.result == 'skipped' ) && !( github.event_name == 'pull_request' && (matrix.cc == 'gcc-10' || matrix.cc == 'clang-10') ) }} }}
    runs-on: [self-hosted, Linux] #ubuntu-latest
    container: ikyb/iroha-builder${{needs.Docker-iroha-builder.outputs._dockertag}} ##ToDo change to hyperledger/iroha-builder:
    strategy:
      fail-fast: false
      matrix:
        cc: [gcc-9, gcc-10, clang-10]
        CMAKE_USE: ['', -DUSE_BURROW=ON, -DUSE_URSA=ON]
        ## FIXME USE_BURROW=ON Fails on macos https://github.com/kuvaldini/iroha/runs/2489119287?check_suite_focus=true
        build_type: [Debug]
        include:
          - {build_type: Release, cc: gcc-9}
    steps:
      - name: Show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END
      - if: ${{false}}
        name: Cancel Previous Workflow Runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ github.token }}
      - name: System info
        run: |
          set -x
          whoami
          free  ||  vm_stat | perl -ne '/page size of (\d+)/ and $size=$1; /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'
          df -h
      - name: Build info
        run: |
          cat << 'END'
          ref:${{github.ref}}
          sha:${{github.sha}}
          run_number:${{github.run_number}}
          event_name:${{github.event_name}}
          event.action:${{github.event.action}}
          event.issue.number:${{ github.event.issue.number }}
          END
      - name: REF and SHA of commented PR to ENV
        if: github.event.comment
        run: >
          curl -fsSL ${{github.event.issue.pull_request.url}} -H "Authorization: token ${{github.token}}" | jq -r '

            "PR_REF="+.head.ref,
            "PR_SHA="+.head.sha,
            "PR_NUM="+(.number|tostring),
            "PR_REPO="+.head.repo.full_name' >>$GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{env.PR_REF}} ## not empty on issue_comment, else default value GITHUB_REF
          repository: ${{env.PR_REPO}} ## not empty on issue_comment, else default value github.repository, required by forks
      - name: export CC and CXX
        run: |
          if test ${{matrix.cc}} = llvm ;then CC=/usr/local/opt/llvm/bin/clang ;fi
          echo CC=$CC                                                >>$GITHUB_ENV
          echo CXX=$(echo $CC | sed -es,gcc,g++, -es,clang,clang++,) >>$GITHUB_ENV
      - ## Read the docs https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md
        name: Cache vcpkg
        uses: actions/cache@v2
        with:
          path: |
            build-vcpkg
          #  build/vcpkg_installed    ## This is default folder for manual installation in manifest mode
          #  $HOME/.cache/vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('build-vcpkg/installed/vcpkg/status') }}
          restore-keys: ${{ runner.os }}-vcpkg-
      - name: Build iroha vcpkg dependancies
        run: ./vcpkg/build_iroha_deps.sh $PWD/build-vcpkg
        ## Takes 48m16s on default GitHub runner with 2 cores
        # ________________________________________________________
        # Executed in   32,08 mins    fish           external
        #    usr time  110,52 mins    0,24 millis  110,52 mins
        #    sys time   12,26 mins    1,34 millis   12,26 mins
        #
        # All requested packages are currently installed.
        # ________________________________________________________
        # Executed in    3,17 secs    fish           external
        #    usr time    2,05 secs  128,00 micros    2,05 secs
        #    sys time    0,70 secs  575,00 micros    0,70 secs
      - name: CMake configure
        run: cmake -B build -DCMAKE_TOOLCHAIN_FILE=$PWD/build-vcpkg/scripts/buildsystems/vcpkg.cmake -GNinja ${{ matrix.CMAKE_USE }}
        #-DCMAKE_VERBOSE_MAKEFILE=ON
        ## Takes 13s on regular GitHub runner
      - name: CMake build
        run: cmake --build build --config ${{ matrix.build_type }} -- -j$(nproc | awk '{printf("%.0f",$1*0.77)}')
        ## Takes 18m44s on regular GitHub runner
      - name: Show free space and disk usage
        if: ${{ always() }}
        run: |
          set +e
          df -h
          echo; echo ----------------------; echo
          du -hd2 /
          true
      - name: Generate artifact suffix depending on matrix
        run: |
          cc=$(echo ${{ matrix.cc }} | sed -Ee's,[-/],,g' )
          build_type=$(echo ${{ matrix.build_type }} | tr A-Z a-z | sed -E -es,debug,dbg, -es,release,rel, )
          uses=$(echo ${{ matrix.CMAKE_USE }} |
            tr ' ' '\n' | sed -nE -e's,.*USE_([a-zA-Z]+)=ON.*,\1,gp ; s, ,-, ;' | xargs | tr ' ' - | tr A-Z a-z )
          echo >>$GITHUB_ENV ARTIFACT_SUFFIX=$cc-$build_type-$uses
      - if: ${{ matrix.CMAKE_USE == '' && matrix.cc == 'gcc-9' && matrix.build_type == 'Debug' }} #ToDo Release
        name: Archive artifact irohad
        uses: actions/upload-artifact@v2
        with:
          name: irohad-ubuntu-${{env.ARTIFACT_SUFFIX}}
          path: build/bin/irohad build/bin/iroha-cli
      - if: ${{ false }}
        name: Archive artifact tests
        uses: actions/upload-artifact@v2
        with:
          name: iroha-tests-ubuntu-${{env.ARTIFACT_SUFFIX}}
          path: |
            build/test_bin/**
            build/test_data/**
      - if: ${{ matrix.cc == 'clang-10' && matrix.CMAKE_USE=='' && matrix.build_type=='Debug' }}
        name: FIXME(do not) Exclude integration_fake_peer_example_test
        run: echo >>$GITHUB_ENV CTEST_EXCLUDE="-E'^integration_fake_peer_example_test$'"
      - # if: ${{ false }}  # disable for now
        timeout-minutes: 10
        name: CTest
        run: |
          initdb --locale=C -E UTF-8 $PWD/postgres_database
          postgres -D $PWD/postgres_database -p5432 & { sleep .3; kill -0 $!; }  ## use pg_ctl no need &
          createuser -s postgres -p5432

          cd build
          ##FIXME enable yac when it were fixed lag
          ctest --output-on-failure -R '^module_' --parallel 4 --exclude-regex yac
          ctest --output-on-failure -R '^integration_' --repeat until-pass:5 "$CTEST_EXCLUDE"
        #FIXME do not CTEST_EXCLUDE
  build-iroha-macos:
    # if: ${{ false }}  # disable for now
    runs-on: macos-latest #[ self-hosted, MacOS ] #
    strategy:
      fail-fast: false
      matrix:
        cc: [clang, llvm] #gcc-10
        # os: [ macos-latest, macos-11.0, macos-10.15 ]
        CMAKE_USE: ['', -DUSE_BURROW=ON, -DUSE_URSA=ON]
        ## FIXME USE_BURROW=ON Fails on macos https://github.com/kuvaldini/iroha/runs/2489119287?check_suite_focus=true
        build_type: [Debug] #,Release, RelWithDebInfo
    ## For pull_request run only Apple-clang, no llvm
    if: ${{ ! (github.event_name == 'pull_request' && matrix.cc == 'llvm') }}
    steps:
      - name: Show context
        run: |
          cat >/dev/null <<'END'
            ${{ toJson(github) }}
          END
      - if: ${{false}}
        name: Cancel Previous Workflow Runs
        uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ github.token }}
      - name: System info
        run: |
          set -x
          whoami
          free  ||  vm_stat | perl -ne '/page size of (\d+)/ and $size=$1; /Pages\s+([^:]+)[^\d]+(\d+)/ and printf("%-16s % 16.2f Mi\n", "$1:", $2 * $size / 1048576);'
          df -h
      - name: Build info
        run: |
          cat << 'END'
          ref:${{github.ref}}
          sha:${{github.sha}}
          run_number:${{github.run_number}}
          event_name:${{github.event_name}}
          event.action:${{github.event.action}}
          event.issue.number:${{ github.event.issue.number }}
          END
      - name: Homebrew
        run: brew install cmake ninja coreutils
        ## Takes 22 seconds with default github runner
      - if: ${{ contains(matrix.cc, 'gcc-10') }}
        name: Homebrew GCC
        run: brew install gcc@10
      - if: ${{ contains(matrix.cc, 'llvm') }}
        name: Homebrew LLVM
        run: brew install llvm
      - if: ${{ contains(matrix.CMAKE_USE, '-DUSE_BURROW=ON') }}
        name: Install protoc-gen-go for -DUSE_BURROW=ON
        run: |
          go get github.com/golang/protobuf/protoc-gen-go
          echo >>$GITHUB_PATH $HOME/go/bin
          #which -a protoc-gen-go
        #run: brew install go protoc-gen-go
      - name: REF and SHA of commented PR to ENV
        if: github.event.comment
        run: >
          curl -fsSL ${{github.event.issue.pull_request.url}} -H "Authorization: token ${{github.token}}" | jq -r '

            "PR_REF="+.head.ref,
            "PR_SHA="+.head.sha,
            "PR_NUM="+(.number|tostring),
            "PR_REPO="+.head.repo.full_name' >>$GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{env.PR_REF}} ## not empty on issue_comment, else default value GITHUB_REF
          repository: ${{env.PR_REPO}} ## not empty on issue_comment, else default value github.repository, required by forks
      - name: export CC and CXX
        run: |
          if test ${{matrix.cc}} = llvm ;then CC=/usr/local/opt/llvm/bin/clang ;fi
          echo CC=$CC                                                >>$GITHUB_ENV
          echo CXX=$(echo $CC | sed -es,gcc,g++, -es,clang,clang++,) >>$GITHUB_ENV
      - ## Read the docs https://github.com/microsoft/vcpkg/blob/master/docs/users/binarycaching.md
        name: Cache vcpkg
        uses: actions/cache@v2
        with:
          path: |
            build-vcpkg
          #  build/vcpkg_installed    ## This is default folder for manual installation in manifest mode
          #  $HOME/.cache/vcpkg
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('build-vcpkg/installed/vcpkg/status') }}
          restore-keys: ${{ runner.os }}-vcpkg-
      - name: Build iroha vcpkg dependancies
        run: ./vcpkg/build_iroha_deps.sh $PWD/build-vcpkg
        ## Takes 48m16s on default GitHub runner with 2 cores
        # ________________________________________________________
        # Executed in   32,08 mins    fish           external
        #    usr time  110,52 mins    0,24 millis  110,52 mins
        #    sys time   12,26 mins    1,34 millis   12,26 mins
        #
        # All requested packages are currently installed.
        # ________________________________________________________
        # Executed in    3,17 secs    fish           external
        #    usr time    2,05 secs  128,00 micros    2,05 secs
        #    sys time    0,70 secs  575,00 micros    0,70 secs
      - name: CMake configure
        run: cmake -B build -DCMAKE_TOOLCHAIN_FILE=$PWD/build-vcpkg/scripts/buildsystems/vcpkg.cmake -GNinja ${{ matrix.CMAKE_USE }}
        #-DCMAKE_VERBOSE_MAKEFILE=ON
        ## Takes 13s on regular GitHub runner
      - name: CMake build
        run: cmake --build build --config ${{ matrix.build_type }} -- -j$(nproc | awk '{printf("%.0f",$1*0.77)}')
        ## Takes 18m44s on regular GitHub runner
      - if: ${{ matrix.CMAKE_USE == '' && matrix.cc == 'gcc-9' && matrix.build_type == 'Debug' }} #ToDo Release
        name: Archive artifact irohad
        uses: actions/upload-artifact@v2
        with:
          name: irohad-macos-${{env.ARTIFACT_SUFFIX}}
      - if: ${{ false }}
        name: Archive artifact tests
        uses: actions/upload-artifact@v2
        with:
          name: iroha-tests-ubuntu-${{env.ARTIFACT_SUFFIX}}
          path: |
            build/test_bin/**
            build/test_data/**
      - name: Install Postgres on MacOS
        run: brew install postgresql
        ## ToDo may be optimize, i.e. cache package
      - # if: ${{ false }}  # disable for now
        timeout-minutes: 10
        name: CTest
        run: |
          initdb --locale=C -E UTF-8 $PWD/postgres_database
          postgres -D $PWD/postgres_database -p5432 & { sleep .3; kill -0 $!; }  ## use pg_ctl no need &
          createuser -s postgres -p5432

          cd build
          ##FIXME enable yac when it were fixed lag
          ctest --output-on-failure -R '^module_' --parallel 4 --exclude-regex yac
          ctest --output-on-failure -R '^integration_' --repeat until-pass:5 "$CTEST_EXCLUDE"
        #FIXME do not CTEST_EXCLUDE
  build-iroha-windows:
    if: ${{ false }} # disable for now
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        # cc: [ cl, clang, mingw ]
        # USE_BURROW: [ -DUSE_BURROW=OFF ]
        # USE_URSA: [ -DUSE_URSA=OFF ]
        ## FIXME USE_BURROW=ON Fails on macos https://github.com/kuvaldini/iroha/runs/2489119287?check_suite_focus=true
        build_type: [Debug] #,Release, RelWithDebInfo
    # defaults:
    #   run:
    #     shell: bash  #pwsh
    steps:
      # - *cancel_previous_runs
      - name: uname in bash
        run: uname
        shell: bash
      - name: uname in default shell
        run: uname
      # - &step_choco_install
      #   name: Chocolatey install
      #   run: choco install cmake ninja
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{env.PR_REF}} ## not empty on issue_comment, else default value GITHUB_REF
          repository: ${{env.PR_REPO}} ## not empty on issue_comment, else default value github.repository, required by forks
      #- *step_vcpkg_cache
      - name: Build iroha vcpkg dependancies
        run: ./vcpkg/build_iroha_deps.sh $PWD/build-vcpkg
        ## Takes 48m16s on default GitHub runner with 2 cores
        # ________________________________________________________
        # Executed in   32,08 mins    fish           external
        #    usr time  110,52 mins    0,24 millis  110,52 mins
        #    sys time   12,26 mins    1,34 millis   12,26 mins
        #
        # All requested packages are currently installed.
        # ________________________________________________________
        # Executed in    3,17 secs    fish           external
        #    usr time    2,05 secs  128,00 micros    2,05 secs
        #    sys time    0,70 secs  575,00 micros    0,70 secs

        shell: bash
      - name: CMake configure
        run: cmake -B build -DCMAKE_TOOLCHAIN_FILE=$PWD/build-vcpkg/scripts/buildsystems/vcpkg.cmake -GNinja ${{ matrix.CMAKE_USE }}
        #-DCMAKE_VERBOSE_MAKEFILE=ON
        ## Takes 13s on regular GitHub runner
      - name: CMake build
        run: cmake --build build --config ${{ matrix.build_type }} -- -j$(nproc | awk '{printf("%.0f",$1*0.77)}')
        ## Takes 18m44s on regular GitHub runner

        shell: bash
      - name: Install Postgres on Windows
        run: choco install postgresql
    # - *step_ctest
  release-iroha-docker-image:
    needs: build-iroha-ubuntu
    runs-on: [self-hosted, Linux] #ubuntu-latest
    steps:
      - name: Download math result for job 2
        uses: actions/download-artifact@v2
        with:
          name: irohad
