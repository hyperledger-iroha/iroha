name: I2::Dev::Tests (Heavy)

on:
  push:
    branches: [iroha2-dev]
    paths:
      - '**.rs'
      - '**.json'
      - '**.toml'
      - '**.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  test-docker:
    #runs-on: [ self-hosted, Linux ] #ubuntu-latest
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
              ~/.cargo
              target/
          key: iroha2-rust-docker-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
              iroha2-rust-docker-

      - name: Install latest rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.55
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential \
            ca-certificates \
            clang \
            llvm-dev
      - name: Build Client CLI
        run: cargo build
        working-directory: client_cli
      - name: Build and push Iroha Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: hyperledger/iroha2:dev

      - name: Setup docker test environment
        run: ./scripts/setup_docker_test_env.sh
      - name: Docker compose genesis test
        run: bash -c './scripts/test_genesis_docker_compose.sh || ( docker-compose logs; false )'
      - name: Docker compose test
        run: bash -c './scripts/test_docker_compose.sh || ( docker-compose logs; false )'
      - name: Cleanup docker test environment
        run: ./scripts/cleanup_docker_test_env.sh

  bench:
    runs-on: [self-hosted, Linux]
    container: rust:1.55-buster
    if: ${{ false }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
              ${{ env.CARGO_HOME }}
              target/
          key: iroha2-rust-bench-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
              iroha2-rust-bench-

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            build-essential \
            ca-certificates \
            clang \
            llvm-dev
      - name: Run benchmarks
        run: cargo bench --workspace --verbose
